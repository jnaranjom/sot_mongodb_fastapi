"""_summary_
"""
from typing import Optional
from datetime import datetime
from bson.objectid import ObjectId
from pydantic import BaseModel, Field
from server.utils.pyobjectid import PyObjectId

class {{ endpoint | capitalize }}(BaseModel):  # pylint: disable=too-few-public-methods
    """_summary_

    Args:
        BaseModel (_type_): _description_
    """

    id: PyObjectId = Field(default_factory=PyObjectId, alias="_id")
    {%- for key, value in endpoint_model.items() %}
    {%- if value is mapping %}
    {{ key }}: dict[List] = Field(...)
    {%- elif value is iterable and value is not mapping and value is not string %}
    {{ key }}: list = Field(default_factory=list)
    {%- else %}
    {{ key }}: str = Field(...)
    {%- endif %}
    {%- endfor %}
    created: datetime = Field(datetime.now())
    updated: datetime = Field(datetime.now())

    class Config:  # pylint: disable=too-few-public-methods
        """_summary_"""

        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
        schema_extra = {
            "example": {{ endpoint_model }}
        }


class {{ endpoint | capitalize }}Update(BaseModel):  # pylint: disable=too-few-public-methods
    """_summary_

    Args:
        BaseModel (_type_): _description_
    """
    {%- for key, value in endpoint_model.items() %}
    {%- if value is mapping %}
    {{ key }}: dict[List] = Field(...)
    {%- elif value is iterable and value is not mapping and value is not string %}
    {{ key }}: list = Field(default_factory=list)
    {%- else %}
    {{ key }}: str = Field(...)
    {%- endif %}
    {%- endfor %}
    updated: datetime = Field(datetime.now())

    class Config:  # pylint: disable=too-few-public-methods
        """_summary_"""

        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
        orm_mode = True
        schema_extra = {
            "example": {{ endpoint_model }}
        }
