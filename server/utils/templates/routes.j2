"""
    {{ endpoint | capitalize }} Routes
"""
from typing import List
from fastapi.encoders import jsonable_encoder
from fastapi import APIRouter, Body, Request, HTTPException, status
from server.models.{{ endpoint | lower }} import {{ endpoint | capitalize }}, {{ endpoint | capitalize }}Update

{{ endpoint | lower }}_route = APIRouter()


@{{ endpoint | lower }}_route.get(
    "/{{ endpoint | lower }}",
    response_description="List all {{ endpoint | lower }}",
    response_model=List[{{ endpoint | capitalize }}],
)
def list_{{ endpoint | lower }}(request: Request):
    """_summary_

    Args:
        request (Request): _description_

    Returns:
        _type_: _description_
    """
    {{ endpoint | lower }}_list = list(request.app.database["{{ endpoint | capitalize }}"].find(limit=100))
    return {{ endpoint | lower }}_list


@{{ endpoint | lower }}_route.get(
    "/{{ endpoint | lower }}/{object_id}",
    response_description="Get a single {{ endpoint[:-1] }}",
    response_model={{ endpoint | capitalize }},
)
def get_{{ endpoint[:-1] }}_by_id(request: Request, object_id: str):
    """Function to retrieve a single {{ endpoint[:-1] }} from MongoDB"""
    if (
        {{ endpoint[:-1] }} := request.app.database["{{ endpoint | capitalize }}"].find_one({"_id": object_id})
    ) is not None:
        return {{ endpoint[:-1] }}

    raise HTTPException(status_code=404, detail=f"Device {object_id} not found")


@{{ endpoint | lower }}_route.post(
    "/{{ endpoint | lower }}",
    response_description="Create a {{ endpoint[:-1] }}",
    status_code=status.HTTP_201_CREATED,
    response_model={{ endpoint | capitalize }},
)
def create_{{ endpoint[:-1] }}(request: Request, {{ endpoint[:-1] }}: {{ endpoint | capitalize }} = Body(...)):
    """_summary_

    Args:
        request (Request): _description_
        {{ endpoint[:-1] }} ({{ endpoint | lower }}, optional): _description_. Defaults to Body(...).

    Returns:
        _type_: _description_
    """
    {{ endpoint[:-1] }} = jsonable_encoder({{ endpoint[:-1] }})
    new_{{ endpoint[:-1] }} = request.app.database["{{ endpoint | capitalize }}"].insert_one({{ endpoint[:-1] }})
    created_{{ endpoint[:-1] }} = request.app.database["{{ endpoint | capitalize }}"].find_one(
        {"_id": new_{{ endpoint[:-1] }}.inserted_id}
    )

    return created_{{ endpoint[:-1] }}


@{{ endpoint | lower }}_route.put(
    "/{{ endpoint | lower }}/{object_id}",
    response_description="Update a {{ endpoint[:-1] }}",
    status_code=status.HTTP_200_OK,
    response_model={{ endpoint | capitalize }}Update,
)
def update_{{ endpoint[:-1] }}(request: Request, object_id: str, {{ endpoint[:-1] }}: {{ endpoint | capitalize }}Update = Body(...)):
    """_summary_

    Args:
        request (Request): _description_
        {{ endpoint[:-1] }} ({{ endpoint | lower }}, optional): _description_. Defaults to Body(...).

    Returns:
        _type_: _description_
    """
    {{ endpoint[:-1] }} = {k: v for k, v in {{ endpoint[:-1] }}.dict().items() if v is not None}
    if len({{ endpoint[:-1] }}) >= 1:
        updated_{{ endpoint[:-1] }} = request.app.database["{{ endpoint | capitalize }}"].update_one(
            {"_id": object_id}, {"$set": {{ endpoint[:-1] }}}
        )

    return updated_{{ endpoint[:-1] }}


@{{ endpoint | lower }}_route.delete(
    "/{{ endpoint | lower }}/{object_id}",
    response_description="Delete a {{ endpoint[:-1] }}",
    response_model={{ endpoint | capitalize }}Update,
)
def delete_{{ endpoint[:-1] }}(request: Request, object_id: str):
    """_summary_

    Args:
        request (Request): _description_
        {{ endpoint[:-1] }} ({{ endpoint | lower }}, optional): _description_. Defaults to Body(...).

    Returns:
        _type_: _description_
    """
    delete_result = request.app.database["{{ endpoint | capitalize }}"].delete_one({"_id": object_id})

    if delete_result.deleted_count == 1:
        print(delete_result)
        return delete_result

    raise HTTPException(status_code=404, detail=f"{{ endpoint[:-1] | capitalize }} {object_id} not found")
